@using Umbraco.Cms.Core.Models.Blocks;
@using Umbraco.Cms.Core.Models; 
@using Umbraco.Cms.Web.Common.PublishedModels
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var url = Context.Request.Path.Value; 
    var segments = url.Split('/', StringSplitOptions.RemoveEmptyEntries);
    var carID = Context.Request.Query["id"].ToString();
	var carCarouselBlock = Model.Value<IEnumerable<BlockListItem>>("carCarouselImg");
	var kinsenLogo = Model.Value<MediaWithCrops>("kinsenLogo");

	// Κατάσταση χρήστη
    var isLoggedIn = Context?.User?.Identity?.IsAuthenticated ?? false;
}

<div id="carDetailsContainer">
@* <script>
;(() => {
  const KEY = 'selectedCarId';

  // ---- sessionStorage spy ----
  const _set = sessionStorage.setItem.bind(sessionStorage);
  const _get = sessionStorage.getItem.bind(sessionStorage);
  const _rem = sessionStorage.removeItem.bind(sessionStorage);
  const _clr = sessionStorage.clear.bind(sessionStorage);

  sessionStorage.setItem = (k, v) => {
    const stack = new Error().stack?.split('\n').slice(1,4).join(' ⟶ ');
    console.log('[SS:set]', k, '→', v, '| from:', stack);
    return _set(k, v);
  };
  sessionStorage.removeItem = (k) => {
    const stack = new Error().stack?.split('\n').slice(1,4).join(' ⟶ ');
    console.warn('[SS:remove]', k, '| from:', stack);
    return _rem(k);
  };
  sessionStorage.clear = () => {
    const stack = new Error().stack?.split('\n').slice(1,4).join(' ⟶ ');
    console.error('[SS:CLEAR] ALL | from:', stack);
    return _clr();
  };

  // ---- cookie helpers + spy ----
  function getCookie(name) {
    const m = document.cookie.match(new RegExp('(?:^|; )' + name.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g,'\\$&') + '=([^;]*)'));
    return m ? decodeURIComponent(m[1]) : null;
  }
  function setCookie(name, value, sec) {
    document.cookie = `${name}=${encodeURIComponent(value)}; Max-Age=${sec}; Path=/; SameSite=Lax; Secure`;
    console.log('[CK:set]', name, '→', value);
  }

  // ---- navigation / lifecycle logs ----
  console.log('[BOOT] origin=', location.origin, 'path=', location.pathname);
  console.log('[BOOT] SS:', _get(KEY), '| CK:', getCookie(KEY), '| window.name:', window.name, '| history.state:', history.state);

  document.addEventListener('visibilitychange', () => {
    console.log('[VIS]', document.visibilityState, '| SS:', _get(KEY), '| CK:', getCookie(KEY));
  });

  window.addEventListener('beforeunload', () => {
    console.log('[UNLOAD] about to unload | SS:', _get(KEY), '| CK:', getCookie(KEY));
  });

  window.addEventListener('pageshow', (evt) => {
    const nav = performance.getEntriesByType('navigation')[0];
    console.log('[PAGESHOW]', { persisted: evt.persisted, navType: nav && nav.type, SS:_get(KEY), CK: getCookie(KEY) });
  });

  window.addEventListener('pagehide', (evt) => {
    console.log('[PAGEHIDE]', { persisted: evt.persisted, SS:_get(KEY), CK: getCookie(KEY) });
  });

  // ---- handy poll (προσωρινά για debug) ----
  let ticks = 0;
  const t = setInterval(() => {
    ticks++;
    console.log(`[TICK ${ticks}] SS:`, _get(KEY), '| CK:', getCookie(KEY));
    if (ticks > 15) clearInterval(t); // σταμάτα μετά από ~15 logs
  }, 2000);

  // ---- expose helpers for manual test in console ----
  window.__dbg = {
    setId: (v) => sessionStorage.setItem(KEY, String(v)),
    rem: () => sessionStorage.removeItem(KEY),
    clr: () => sessionStorage.clear(),
    ck: () => setCookie(KEY, _get(KEY) ?? '', 1800),
    get: () => ({ ss: _get(KEY), ck: getCookie(KEY), name: window.name, state: history.state })
  };
})();
</script> *@

	<script>
		(() => {
		// helper: διάβασε cookie
		function getCookie(name) {
			const m = document.cookie.match(new RegExp('(?:^|; )' + name.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g,'\\$&') + '=([^;]*)'));
			return m ? decodeURIComponent(m[1]) : null;
		}

		const fromStorage = sessionStorage.getItem('selectedCarId');
		const fromState   = (history.state && history.state.carId) ? String(history.state.carId) : null;
		const fromCookie  = getCookie('selectedCarId');
		let   fromName    = null;
		if (typeof window.name === 'string' && window.name.indexOf('car:') === 0) {
   			fromName = window.name.slice(4); // πάρε ΜΟΝΟ το ID
 		}
		const carID = (fromStorage && fromStorage.trim())
					|| (fromState && fromState.trim())
					|| (fromCookie && fromCookie.trim())
					|| (fromName && fromName.trim());

		console.log('[MEMBER] carID (resolved):', carID);

		if (!carID) {
			console.warn('[MEMBER] carID is missing or empty');
			// προαιρετικά: window.location.href = '/cars';
			return;
		}

		// Αν ο controller σου θέλει int, κράτα αυτόν τον έλεγχο:
		if (!/^\d+$/.test(carID)) {
			console.error('[MEMBER] carID is not numeric, controller expects int:', carID);
			return;
		}

		// ------- rehydrate για να επιβιώνει σε refresh/επιστροφές -------
		if (!fromStorage && (fromCookie || fromName)) {
			try { sessionStorage.setItem('selectedCarId', carID); } catch {}
		}
		if (!fromCookie) {
			document.cookie = `selectedCarId=${encodeURIComponent(carID)}; Max-Age=${30*60}; Path=/; SameSite=Lax; Secure`;
		}
		if (!fromName) {
			window.name = 'car:' + carID;
		}
		history.replaceState({ carId: carID }, '', location.pathname);

		// ------- FETCH όπως το είχες (κρατάω ίδιο endpoint) -------
		const payload = { id: Number(carID) }; 
		fetch("/umbraco/api/CarApiVisitor/getcarbyid", {
			method: "POST",
			headers: {"Content-Type": "application/json"},
			credentials: "same-origin",
  			body: JSON.stringify(payload)  
		})
			.then(async (resp) => {
				const text = await resp.text();
				if (!resp.ok) {
					let msg = text;
					try { msg = JSON.parse(text).message || msg; } catch {}
					throw new Error(`API ${resp.status} - ${msg}`);
				}
				return text ? JSON.parse(text) : null;
			})
			
			.then(data => {
				console.log("API RESPONSE:", data);
				
				try { sessionStorage.setItem('selectedCarId', carID); } catch {}
					document.cookie = `selectedCarId=${encodeURIComponent(carID)}; Max-Age=${30*60}; Path=/; SameSite=Lax; Secure`;
					window.name = 'car:' + carID;
					document.getElementById('carDetailsContainer').innerHTML = `	
					<div class="w-100 mt-5 d-flex justify-content-center">
						<div id="carouselExampleDark" class="carousel carousel-dark slide shadow-lg custom-carousel"
							data-bs-ride="carousel">
							
							<div class="carousel-indicators">
								<button type="button"
										data-bs-target="#carouselExampleDark"
										data-bs-slide-to="0"
										class="active"
										aria-current="true"
										aria-label="Slide 1"></button>
							</div>

							<div class="carousel-inner">
								<div class="carousel-item active">
									<img src="${data.imageUrl}" 
									class="d-block mx-auto"
									style="max-width: 500px; max-height: 320px; width: auto; height: auto; image-rendering: auto;" 
									alt="Car Image" />
								</div>
							</div>

							@* <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="prev">
								<span class="carousel-control-prev-icon" aria-hidden="true"></span>
								<span class="visually-hidden">Previous</span>
							</button>
							<button class="carousel-control-next" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="next">
								<span class="carousel-control-next-icon" aria-hidden="true"></span>
								<span class="visually-hidden">Next</span>
							</button> *@
						</div>
					</div>

					<div class="offer-box">
						<div class="price-section">
						<span class="car-title">${data.maker} ${data.model}<br></span>
							<span class="price-label">Τιμή αγοράς:</span>
							<span class="price-value">${data.price} €</span>
							<span class="vat-label">με τον ΦΠΑ</span>
						</div>
						<div class="upologismos_label">Υπολογισμός σε Δόσεις:</div>
							<div class="btn-group">
								<button class="custom-dropdown-button dropdown-toggle"
									type="button"
									data-bs-toggle="dropdown"
									aria-expanded="false"
									data-plan="efapaks">
									Εφάπαξ χωρίς Τόκους
								</button>
								<ul class="dropdown-menu">
									<li><button class="dropdown-item" type="button" value="efapaks">Εφάπαξ χωρίς Τόκους</button></li>
									<li><button class="dropdown-item" type="button" value="6">6 Μήνες</button></li>
									<li><button class="dropdown-item" type="button" value="12">12 Μήνες</button></li>
									<li><button class="dropdown-item" type="button" value="24">24 Μήνες</button></li>
									<li><button class="dropdown-item" type="button" value="36">36 Μήνες</button></li>
									<li><button class="dropdown-item" type="button" value="48">48 Μήνες</button></li>
								</ul>
							</div>
							<div class="installment-result">
								Μηνιαία Δόση: <span id="installmentValue">-</span>
							</div>
							<div class="offer-button-container">	
								<button class="addToCartBtn"> Προσθήκη στο Καλάθι </button>
							</div>
						</div>
					
					<section class="car-specs-section">
						<p>Στοιχεία αυτοκινήτου</p>
						<div class="specs-grid">
							<div><strong>Μάρκα:&nbsp;</strong> ${data.maker}</div>
							<div><strong>Μοντέλο:&nbsp;</strong> ${data.model}</div>
							<div><strong>Κατηγορία:&nbsp;</strong> ${data.typeOfCar}</div>
							<div><strong>Χρώμα:&nbsp;</strong> ${data.color}</div>
							<div><strong>Καύσιμο:&nbsp;</strong> ${data.fuel}</div>
							<div><strong>Κιβώτιο:&nbsp;</strong> ${data.transmissionType}</div>
							<div><strong>Χιλιόμετρα:&nbsp;</strong> ${data.km} km</div>
							<div><strong>Ιπποδύναμη:&nbsp;</strong> ${data.hp} hp</div>
							<div><strong>Κυβικά:&nbsp;</strong> ${data.cc} cc</div>
						</div>
					</section>
				`; 
			})
			.catch(error => {
				console.error("API ERROR:", error); 
			});
			window.addEventListener('pageshow', evt => {
			const nav = performance.getEntriesByType && performance.getEntriesByType('navigation')[0];
			const isBF = (evt.persisted === true) || (nav && nav.type === 'back_forward');
			if (isBF) {
			// αν θες να ξαναφέρνεις δεδομένα, μπορείς να ξανατρέξεις το fetch εδώ
			// ή άστο όπως είναι αν ήδη φαίνονται στο DOM
			}
		});
	})();
		
	</script>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="~/js/carDetailsMember.js"></script>

<script>
	document.addEventListener('click', (e) => {
		const toggleBtn = e.target.closest('.custom-dropdown-button');
		const item = e.target.closest('.dropdown-item');
		const clickedInsideDropdown = e.target.closest('.btn-group');

		// ΤΟGGLE: Άνοιγμα / κλείσιμο dropdown όταν πατηθεί το κουμπί
		if (toggleBtn) {
			e.preventDefault();

			const dropdownMenu = toggleBtn.nextElementSibling;
			if (dropdownMenu && dropdownMenu.classList.contains('dropdown-menu')) {
				dropdownMenu.classList.toggle('show');
			}
			return;
		}

		// ΕΠΙΛΟΓΗ item: ενημέρωση κουμπιού με κείμενο και value
		if (item) {
			e.preventDefault();

			const dropdown = item.closest('.dropdown-menu');
			const toggle = dropdown?.previousElementSibling;
			if (toggle) {
				toggle.textContent = item.textContent.trim();
				toggle.setAttribute('data-plan', item.value ?? item.getAttribute('value') ?? '');
			}

			dropdown.classList.remove('show');
			return;
		}

		// CLICK ΕΚΤΟΣ: Κλείσε όλα τα dropdowns
		if (!clickedInsideDropdown) {
			document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
				menu.classList.remove('show');
			});
		}
	});
</script>



